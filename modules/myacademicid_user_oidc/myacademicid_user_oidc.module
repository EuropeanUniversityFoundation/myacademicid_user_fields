<?php

/**
 * @file
 * Primary module hooks for MyAcademicID user OpenID Connect module.
 */

use Drupal\user\UserInterface;

/**
 * Modify the list of claims.
 *
 * @param array $claims
 *   A array of claims.
 *
 * @ingroup openid_connect_api
 */
function myacademicid_user_oidc_openid_connect_claims_alter(array &$claims) {
  $service = \Drupal::service('myacademicid_user_oidc');
  $service->claimsAlter($claims);
}

/**
 * Save userinfo hook.
 *
 * This hook runs after the claim mappings have been applied by the OpenID
 * Connect module, but before the account will be saved.
 *
 * A popular use case for this hook is mapping additional information like
 * user roles or other complex claims provided by the identity provider, that
 * the OpenID Connect module has no mapping mechanisms for.
 *
 * @param \Drupal\user\UserInterface $account
 *   A user account object.
 * @param array $context
 *   An associative array with context information:
 *   - tokens:         Array of original tokens.
 *   - user_data:      Array of user and session data from the ID token.
 *   - userinfo:       Array of user information from the userinfo endpoint.
 *   - plugin_id:      The plugin identifier.
 *   - sub:            The remote user identifier.
 *   - is_new:         Whether the account was created during authorization.
 *
 * @ingroup openid_connect_api
 */
function myacademicid_user_oidc_openid_connect_userinfo_save(UserInterface $account, array $context) {
  $service = \Drupal::service('myacademicid_user_oidc');
  $service->userinfoSave($account, $context);
}
